import fs from "fs";
import path from "path";

import {
    createNft,
    mplTokenMetadata,
} from "@metaplex-foundation/mpl-token-metadata";
import {
    createSignerFromKeypair,
    signerIdentity,
} from "@metaplex-foundation/umi";
import { createUmi } from "@metaplex-foundation/umi-bundle-defaults";
import { base58 } from "@metaplex-foundation/umi/serializers";
import { Keypair } from "@solana/web3.js";

import { aiAgent } from "../cheshireterminal/cheshire_the_bot/aiAgent.js";
import { config } from "../cheshireterminal/cheshire_the_bot/config.js";

async function generateAndMintNFT() {
    console.log('Starting NFT generation and minting process...');

    try {
        // Generate celebration image using local stable diffusion model
        console.log('\nGenerating celebration image using local stable diffusion model...');
        const imagePrompt = "A futuristic Cheshire Cat celebrating with blockchain symbols and privacy-focused imagery, digital art style, highly detailed, intricate, cyberpunk aesthetic";
        const imageResult = await aiAgent.generateImage(imagePrompt);

        if (!imageResult || !imageResult.filepath) {
            throw new Error('Failed to generate image');
        }

        console.log('Image generated successfully:', imageResult.filepath);

        // Initialize UMI
        console.log('\nInitializing Solana connection...');
        const umi = createUmi(config.solana.rpcUrl)
            .use(mplTokenMetadata());

        // Create a new keypair for the NFT
        const nftKeypair = Keypair.generate();
        const signer = createSignerFromKeypair(umi, nftKeypair);
        umi.use(signerIdentity(signer));

        // Upload the image
        console.log('\nUploading image...');
        const imageBuffer = fs.readFileSync(imageResult.filepath);
        const imageBase64 = imageBuffer.toString('base64');
        const imageDataUri = `data:image/png;base64,${imageBase64}`;

        // Create metadata
        console.log('\nCreating NFT metadata...');
        const metadata = {
            name: "Cheshire's Privacy Celebration",
            symbol: "CHESHIRE",
            description: "A celebration of privacy and blockchain technology, generated by AI using local stable diffusion model",
            image: imageDataUri,
            attributes: [
                { trait_type: "Generation", value: "AI" },
                { trait_type: "Model", value: "Stable Diffusion" },
                { trait_type: "Style", value: "Digital Art" },
                { trait_type: "Theme", value: "Privacy" },
                { trait_type: "Character", value: "Cheshire Cat" }
            ],
            properties: {
                files: [
                    {
                        uri: imageDataUri,
                        type: "image/png"
                    }
                ],
                category: "image",
                creators: [
                    {
                        address: base58.serialize(umi.identity.publicKey),
                        share: 100
                    }
                ]
            }
        };

        // Mint NFT
        console.log('\nMinting NFT...');
        const mint = await createNft(umi, {
            mint: signer,
            name: metadata.name,
            symbol: metadata.symbol,
            uri: JSON.stringify(metadata),
            sellerFeeBasisPoints: 500, // 5% royalty
            isCollection: false,
            creators: [
                {
                    address: umi.identity.publicKey,
                    verified: true,
                    share: 100,
                }
            ],
        }).sendAndConfirm(umi);

        console.log('\nNFT minted successfully! ðŸŽ‰');
        console.log('Transaction:', base58.serialize(mint.signature));
        console.log('NFT Address:', base58.serialize(nftKeypair.publicKey));

        // Store mint info locally
        const mintInfo = {
            timestamp: new Date().toISOString(),
            nftAddress: base58.serialize(nftKeypair.publicKey),
            transactionSignature: base58.serialize(mint.signature),
            metadata,
            localImagePath: imageResult.filepath,
            prompt: imagePrompt,
            model: config.llm.models.image.name
        };

        const mintInfoPath = path.join(config.outputDir, 'mint-info.json');
        fs.writeFileSync(mintInfoPath, JSON.stringify(mintInfo, null, 2));
        console.log('\nMint info saved to:', mintInfoPath);

        return {
            nftAddress: base58.serialize(nftKeypair.publicKey),
            signature: base58.serialize(mint.signature),
            metadata,
            localImagePath: imageResult.filepath
        };
    } catch (error) {
        console.error('Error during NFT generation and minting:', error);
        throw error;
    }
}

// Run the minting process
console.log('Starting celebration NFT minting process...');
generateAndMintNFT().then((result) => {
    console.log('\nCelebration complete! ðŸŽ‰');
    console.log('You can view your NFT at:');
    console.log(`https://explorer.solana.com/address/${result.nftAddress}`);
    console.log(`https://solscan.io/token/${result.nftAddress}`);
    console.log('\nTransaction:');
    console.log(`https://explorer.solana.com/tx/${result.signature}`);
}).catch(error => {
    console.error('Failed to mint celebration NFT:', error);
    process.exit(1);
});
